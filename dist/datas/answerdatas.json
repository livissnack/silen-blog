{
  "total":"32",
  "data":[
    {
      "title":"关于display的那点事儿",
     "uesr":"oyghan",
      "time":"23 ",
      "content":"block元素会独占一行,多个block元素会各自新起一行,inline元素不会独占一行,多个相邻的行内元素会排列在同一行里,简单来说就是将对象呈现为inline对象,但是对象的内容作为block对象呈现"
    },
    {
      "title":"如何实现元素居中",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"因为英语比较差，英文资料看的一知半解，中文相对的资料讲解的也不是十分详尽，对于laravel正常的使用现在是没有太大的问题，但是对于深层次的理解，就有点小困难了，特别是针对于设计模式方面的，laravel源码的封装程度，阅读感十分糟糕，是否有视频讲解这一块，实现的原理！"
    },
    {
      "title":"关于css的背景",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"div 里面有内容才会出现背景,没内容又没设置宽高,那div就是空的,默认高度为0宽度为0,如果只有div 容器大小都没有 背景是不会显示的,不同的浏览器显示默认宽高不同的W3C标准里,DIV必须有宽高参数的"
    },
    {
      "title":"css中元素的优先级",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"因为英语比较差，英文资料看的一知半解，中文相对的资料讲解的也不是十分详尽，对于laravel正常的使用现在是没有太大的问题，但是对于深层次的理解，就有点小困难了，特别是针对于设计模式方面的,laravel源码的封装程度,阅读感十分糟糕，是否有视频讲解这一块，实现的原理！"
    },
    {
      "title":"浮动的原理及使用",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"任何标签都可以设置浮动,若行内元素或者内联元素设置了浮动,也可以设置宽和高,若相邻的块级元素(特指紧邻后面的元素)同时设置同方向浮动,会紧邻的排列在一行.设置浮动的框会脱离普通文档流向左或者向右发生移动直到碰到包含框或者另一个浮动框边框为止."
    },
    {
      "title":"关于渐进增强",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。"
    },
    {
      "title":"关于优雅降级及二者区别",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。"
    },
    {
      "title":"怎样写自适应的pc端和移动端页面",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"因为英语比较差，英文资料看的一知半解，中文相对的资料讲解的也不是十分详尽，对于laravel正常的使用现在是没有太大的问题，但是对于深层次的理解，就有点小困难了，特别是针对于设计模式方面的，laravel源码的封装程度，阅读感十分糟糕，是否有视频讲解这一块，实现的原理！"
    },
    {
      "title":"怎样将项目部署到服务器上",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"因为英语比较差，英文资料看的一知半解，中文相对的资料讲解的也不是十分详尽，对于laravel正常的使用现在是没有太大的问题，但是对于深层次的理解，就有点小困难了，特别是针对于设计模式方面的，laravel源码的封装程度，阅读感十分糟糕，是否有视频讲解这一块，实现的原理！"
    },
    {
      "title":"怎样在阿里云的ECS上配置https",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"因为英语比较差，英文资料看的一知半解，中文相对的资料讲解的也不是十分详尽，对于laravel正常的使用现在是没有太大的问题，但是对于深层次的理解，就有点小困难了，特别是针对于设计模式方面的，laravel源码的封装程度，阅读感十分糟糕，是否有视频讲解这一块，实现的原理！"
    },
    {
      "title":"变量命名规则",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"- 第一个字符必须是一个字母(大小写均可)或者是_、$后续的字符可以是字母、数字、_、$变量的名字不能是关键字，如：case、if、for、delete...命名不能超过255个字符"
    },
    {
      "title":"关于全局变量parseInt",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"- parseInt全局函数用于解析一个字符串,返回指定基数的整数如果参数不是字符串,则将其转换为字符串且开头空白符被忽略,radix参数是(2,36]之间的整数值,用于指定转换的基数,如果省略该参数或赋值为0,默认以十进制基数解析"
    },
    {
      "title":"关于全局变量parseFlaot",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"- parseFloat全局函数用于解析一个字符串参数并返回一个浮点数,忽略+,-,(0-9),e/E,.;如果参数字符串的第一个字符不能被解析成为数字,则返回NaN"
    },
    {
      "title":"字符串方法substring()",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"  1.若开始索引=结束索引,返回空字符串;2.若无结束索引,则取到末尾;3.若结束索引小于开始索引,互换索引;4.若任一参数小于0或为NaN,则默认为0;5.若任一参数大于字符串长度,则取字符串长度"
    },
    {
      "title":"基本数据类型的保存",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"1. 基本数据类型在内存单元中保存的是单一的具体值2. 若复制了基本数据类型的值,一个值的改变对另一个的值不造成任何影响！"
    },
    {
      "title":"复合数据类型的保存",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"1. 复合数据类型在内存单元中保存的具体值的指针,即只有2个复合数据类型的指针指向了同一个地址,这两个数据的值才相等2. 复合数据类型的复制其实复制的是指针,且指针都指向了同一个数据,改变任意一个的复制值,都会改变数据"
    },
    {
      "title":"switch语句",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"首先设置表达式n(变量),随后表达式的值会与结构中的从每个case的值比较,如果存在匹配,则与该case关联的代码就会执行,使用break来阻止代码自动的向下一个case运行1. 更使用于单值判断且n与m的数据类型相等"
    },
    {
      "title":"怎样在阿里云的ECS上配置https",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"因为英语比较差，英文资料看的一知半解，中文相对的资料讲解的也不是十分详尽，对于laravel正常的使用现在是没有太大的问题，但是对于深层次的理解，就有点小困难了，特别是针对于设计模式方面的，laravel源码的封装程度，阅读感十分糟糕，是否有视频讲解这一块，实现的原理！"
    },
    {
      "title":"while循环",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"1. 在指定条件为true的时候循环执行代码块,如果没有增加条件中所用的变量的值,该循环永不会结束,可能导致浏览器崩溃2. 使用于无次数限制无规律的重复执行代码"
    },
    {
      "title":"do while 循环",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"1. 当while中判断条件为true的时候执行do内的代码2. 由于先执行代码再匹配判断条件所以即使条件为false,循环也至少执行一次"
    },
    {
      "title":"索引与长度关系？",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"1. 数组的索引从0开始到length-1结束,且当往数组中添加新的元素时,新元素的索引为length2. 数组长度属性会随着数组中元素个数的增加而增加3. 当设置的数组长度小于当前数组元素的个数,超出的元素会被删除4. 当设置的数组长度大于当前数组元素的个数,超出的部分为"
    },
    {
      "title":"事件冒泡",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"当一个元素的事件被触发后(例如用户做了点击事件),首先执行自身条用的事件代码,如果有事件代码就执行,如果没有就不执行"
    },
    {
      "title":"事件捕获",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"事件捕获: 从最不特定的元素触发到最特定的元素,同级元素无法触发事件捕获; 例如: 每次点击,事件都会从根元素开始执行,即捕获到,如果有事件就执行"
    },
    {
      "title":"事件委托",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"内部利用事件冒泡原理,只指定一个事件处理程序,就可以管理某一类的所有事件"
    },
    {
      "title":"事件对象(e)",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"1. 在任意的事件处理程序中接受的参数e,为事件对象2. 事件对象中保存了关于当前时间触发时的一些信息3. 事件对象参数是js事件机制传递的e.type当前事件的类型名"
    },
    {
      "title":"innerHTML",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"1. 用于结构复杂的元素的创建2. 会覆盖原有标签的内容,需要使用+=操作防止覆盖; 但是一旦使用的+=操作会导致新旧内容不一致,对原有标签添加的样式不会应用3. 一旦在循环内使用会造成性能问题, 可以通过拼接字符串或数组来替代"
    },
    {
      "title":"document.createElement()",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"1. 性能好,使用灵活2. 使用动态创建不会在页面中显示,如果需要显示,可以指定添加至指定位置3. 创建元素->设置好元素的样式和属性->追加至指定位置4. 动态创建的元素可以使用createDocumnetFragment包裹"
    },
    {
      "title":"怎样在阿里云的ECS上配置https",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"因为英语比较差，英文资料看的一知半解，中文相对的资料讲解的也不是十分详尽，对于laravel正常的使用现在是没有太大的问题，但是对于深层次的理解，就有点小困难了，特别是针对于设计模式方面的，laravel源码的封装程度，阅读感十分糟糕，是否有视频讲解这一块，实现的原理！"
    },
    {
      "title":"单线程",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"在同一时间只能执行一件事,尽管可能有多个参与操作,也只能有一个主线程任务分配,容易出现阻塞(页面假死),js是单线程语言"
    },
    {
      "title":"多线程",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"在同一时间可以执行多个任务,多个线程间独立运行,有效的避免了代码的阻塞并且提高了程序的运行性能,java是多线程语言"
    },
    {
      "title":"同步",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"发送方发出数据后,等待接收方发回响应后才发下一个数据包的通讯方式"
    },
    {
      "title":"异步",
      "uesr":"oyghan",
      "time":"23 ",
      "content":"发送方发出数据后,不等待接收方发回响应,接着发送下一个数据包的通讯方式且在程序执行过程中的某些任务比较耗时或者执行时间不确定,将任务添加到任务队列中等待,直到主线程任务执行完成才会执行任务队列的任务;"
    }
  ]
}